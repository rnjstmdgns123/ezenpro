<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<!-- 웹프로젝트의 진입점 톰캣이 실행될 때, 웹프로젝트의 web.xml을 해석한다. -->
	
	<!-- 웹 프로젝트 내부에서 사용할 변수를 정희하는 부분이 context-param이다. -->
	<context-param>
		<!-- 변수 이름 -->
		<param-name>contextConfigLocation</param-name>
		<!-- 변수 값(파일) -->
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>
	
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<!-- 톰캣이 실행되고, 종료될 때., 동작하는 메서드를 정의할 수 있다. -->
	<listener>
		<!-- 스프링의 contextLoaderListener가 실행될 때, contextConfigLocation 이라고 선언된 값을 읽는다.
		변수의 값이 스프링의 bean을 정의하는 xml이라면, xml파일을 해석해서 스프링의 IOC 컨테이너에 빈으로 등록한다. -->
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- 디스패쳐 서블릿이 동작하기전에 요청을 가로채는 클래스를 filter라고 한다. 
		 요청을 가로채서 특정 코드를 실행하고, 요청이 끝난 뒤, 응답을 보낼 때 에도 응답을 가로채
		 특정 코드를 실행할 수 있다.(인코딩 때문에 넣었음)
	-->
	<filter>
		<!-- 필터로 만든 클래스의 변수(이름)을  정의한다. -->
        <filter-name>encodingFilter</filter-name>
        <!-- 필터로 사용할 클래스를 정의한다. -->
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!-- 필터 클래스 내부에서만 사용할 변수를 정의한다.-->
        <init-param>
        	<!-- 변수 이름 -->
            <param-name>encoding</param-name>
            <!-- 변수 값 -->
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
        	<!-- forceEncoding은 boolean타입의 변수이고, ture일 경우
        		응잡에 대한 인코딩도 처리해준다. -->
        	<param-name>forceEncoding</param-name>
        	<param-value>true</param-value>
        </init-param>
    </filter>  

	<!-- 필터로 등록한 클래스가 어떤 요청에 동작할지를 정의한다. -->
    <filter-mapping>
    	<!-- 위에서 만든 encodingFilter 클래스를 모든 url의 요청에서 실행한다는 의미 -->
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
	<filter>
	<!-- 첨부파일을 처리하기 위해서는 Multipart타입의 클래스를 인식하는  -->
	  <filter-name>MultipartFilter</filter-name>
	  <filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
	</filter>
	
	<filter-mapping>
	  <filter-name>MultipartFilter</filter-name>
	  <url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- Processes application requests -->
	<!-- 서블릿 태그는 웹프로젝트에서 사용할 서블릿을 정의한다. -->
	<servlet>
		<!-- 서블릿 클래스의 변수(이름)을 정의한다. -->
		<servlet-name>appServlet</servlet-name>
		<!-- 서블릿으로 사용할 클래스를 작성한다. 
			스프링에서는 기본적으로 프론트컨트롤러 패턴을 이용하기 때문에
			서블릿 클래스는 하나만 존재한다. 
		-->
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- 서블릿 클래스 내부에서 사용할 변수를 정의한다. -->
		<init-param>
			<!--  디스패치 서블릿에서 xml 설정을 읽기 위해서는 반드시 param-name을
			contextConfigLocation으로 정의해야한다. -->
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<!-- 어떤 서블릿이 먼저 동작할 건지에 대한 순서를 작성한다. -->
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<!-- 위에서 정의한 서블릿 클래스가 어떤 요청에 응답할지 정의한다. -->
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<!--  url pattern이 /로 정의되어 있을 경우 모든 요청에 대해 디스패쳐서블릿이 응답한다. -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>

</web-app>
