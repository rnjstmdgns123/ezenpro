<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	
	<!-- 클래스 위에 특정 어노테이션을 인식한다.
		@Controller, @Service, @Repository, @configuraion
		인식된 클래스의 생성자를 호출한다.-->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- 정적 자원에 대한 접근 가능한 경로를 설정한다.
		직접 수정하지 않으면 절대 변경되지 않는 파일을 정적 파일 (자원)이라고 이야기한다.
		대표적인 예시로 html, css, js 이미지등을 정적 자원 혹은 정적 리소스 라고 이야기 한다.
		mapping 속성에 들어있는 값으로 url 요청이 들어오게 된다면
		ex) localhost:8080/ABC/resources/~~
		location 속성에 들어있는 폴더를 찾게 된다.
		/webapp/resources 폴더를 찾는다는 뜻
		 -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- 뷰 리졸버는 스프링의 컨트롤러의 메서드가 반환되는 값에 따라 jsp파일을 찾기 위한  설정을 한다.
		컨트롤러 클래스 안에 @RequestMapping 어노테이션이 달린 메서드를 찾아
		메서드의 반환 타입이 String이고, 문자열을 반환한다면 jsp 파일을 찾아, 해당 jsp로 포워딩한다. 
		setPrefix 메서드의 파라미터로 들어가는 문자열은 컨트롤러 메서드의 반환 값의 "앞" 에 문자열이 추가되고
		setSuffix 메서드의 파라미터로 들어가는 문자열은 컨트롤러 메서드의
		반환 값의 "뒤"에 문자열이 추가된다.
		ex)@RequestMapping 어노테이션이 달린 메서드의 반환 값이 "view" 라면
		뷰리졸버는 /WEB-INF/views/view.jsp 파일을 찾아 포워딩한다.
		
		-->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- com.a.ezn 패키지를 돌면서 component라고 하는 어노테이션을 순회하며 찾음
		@controller 어노테이션이 component의 상속을 받고 있기 떄문에 조회되는거임.
	 -->
	 
	 <!-- 컴포넌트 스캔은 base-package 속성에 들어있는 패키지 전체를 순회하며
	  @Component가 달려있는 클래스를 전부 찾아 생성자를 호출하고 IOC 컨테이너에 넣는다.
	  @Component어노테이션을 직접 사용하지 않더라도,
	  @Controller, @Service, @Repository 어노테이션은 @Componant 어노테이션을
	  상속받고 있기 때문에 컴포넌트 스캔에 동작한다. -->
	<context:component-scan base-package="com.a.ezn" />
	
	<!-- 일반적으로 @RequestMapping 어노테이션이 달린 메서드의 반환 값은
	jsp파일로 포워딩 하기 위해 사용하지만, 특정 요청에 대해서는 jsp파일이 아닌,
	단순 텍스트 형식의 데이터를 반환할 수도 있다.
	단순 텍스트 형식의 데이터는 사용하기 어려워, json 형태로 변환해주는 클래스를 빈으로 등록한다. -->	
	<beans:bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
		<beans:property name="contentType" value="application/json;charset=UTF-8"></beans:property>
	</beans:bean>	
	
	<!-- 첨부파일을 처리하기 위해 빈으로 등록하는 클래스 -->
	<beans:bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="defaultEncoding" value="UTF-8"></beans:property>
		<beans:property name="maxUploadSize" value="52428800"></beans:property>
	</beans:bean>
	
	
	
	
	
	
	<!-- 인터셉터는 특정 요청을 가로채 코드를 실행하거나, 응답이  브라우저로 가기 전에
		코드를 실행할 수 있게 한다. 인터셉터는 필터와 다르게, 디스패쳐서블릿과 컨트롤러 사이에서
		요청을 가로챌 수 있다. -->
	<beans:bean id="loginInterceptor" class="com.a.ezn.LoginSessionInterceptor"/>
	
	<!-- 위에 설정한 빈의 클래스 안에 작성된 코드를 특정 url로 요청이 올 때 실행하게 하는 설정 -->
	<interceptors>
		<interceptor>
			<!-- 이 인터셉터는 모든 url 요청을 가로챈다. -->
			<mapping path="/**"/>
			<!--  exclude-mapping으로 설정한 path는 인터셉터가 가로채지 않는다. -->
			<!-- path에 등록되어있는 경로 제외 -->
			<exclude-mapping path="/user/login.do"/>
			<exclude-mapping path="/user/join.do"/>
			<exclude-mapping path="/board/board.do"/>
			<exclude-mapping path="/board/post.do"/>
			<exclude-mapping path="/user/idCheck.do"/>
			<beans:ref bean="loginInterceptor"/>
		</interceptor>
	</interceptors>
</beans:beans>
